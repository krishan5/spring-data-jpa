spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#spring.datasource.initialization-mode=always
#spring.datasource.continue-on-error=true
#spring.jpa.hibernate.ddl-auto=create-drop

#It's also important to remember to turn off automatic schema creation to avoid conflicts, in case we have schema.sql
#If we don't have schema.sql then we can opt for create-drop or create options.
spring.jpa.hibernate.ddl-auto=create-drop

#spring.data.jpa.repositories.bootstrap-mode=default

#Enabling H2 console
spring.h2.console.enabled=true

#Turn statistics on
spring.jpa.properties.hibernate.generate_statistics=true
#logging.level.show-sql=true

#Show all queries
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#Use trace in case you want to see parameter value in console which was given to SQL query in code.
logging.level.org.hibernate.type=trace

################################################
#Second level cache - Ehcache:

#Step 1 - Enable second level cache
spring.jpa.properties.hibernate.cache.use_second_level_cache = true
#Step 2 - Specify the caching framework - Ehcache
spring.jpa.properties.hibernate.cache.region.factory_class = org.hibernate.cache.ehcache.internal.EhcacheRegionFactory
#Step 3 - Only cache what I tell you
spring.jpa.properties.javax.persistence.sharedCache.mode = ENABLE_SELECTIVE
#Optional step to start logging for Ehcache
logging.level.net.sf.ehcache = debug
#Step 4 - What data to cache
#For this, add @Cacheable annotation on class which you want to get cache.